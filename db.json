{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/about/index.md","path":"about/index.md","modified":0,"renderable":0},{"_id":"source/link/index.md","path":"link/index.md","modified":0,"renderable":0},{"_id":"source/movies/index.md","path":"movies/index.md","modified":0,"renderable":0},{"_id":"source/music/index.md","path":"music/index.md","modified":0,"renderable":0},{"_id":"source/tags/index.md","path":"tags/index.md","modified":0,"renderable":0},{"_id":"source/img/image-20221025163441508.png","path":"img/image-20221025163441508.png","modified":0,"renderable":0},{"_id":"source/img/image-20221025164401144.png","path":"img/image-20221025164401144.png","modified":0,"renderable":0},{"_id":"source/img/image-20221025164457908.png","path":"img/image-20221025164457908.png","modified":0,"renderable":0},{"_id":"source/img/image-20221025164539512.png","path":"img/image-20221025164539512.png","modified":0,"renderable":0},{"_id":"source/img/image-20221025164652215.png","path":"img/image-20221025164652215.png","modified":0,"renderable":0},{"_id":"source/img/image-20230521164959631.png","path":"img/image-20230521164959631.png","modified":0,"renderable":0},{"_id":"source/img/image-20221025164618940.png","path":"img/image-20221025164618940.png","modified":0,"renderable":0},{"_id":"source/img/image-20230521163900590.png","path":"img/image-20230521163900590.png","modified":0,"renderable":0},{"_id":"source/img/image-20230521193406678.png","path":"img/image-20230521193406678.png","modified":0,"renderable":0},{"_id":"source/img/image-20230521192401756.png","path":"img/image-20230521192401756.png","modified":0,"renderable":0},{"_id":"source/img/image-20230521212323764.png","path":"img/image-20230521212323764.png","modified":0,"renderable":0},{"_id":"source/img/image-20230521212411230.png","path":"img/image-20230521212411230.png","modified":0,"renderable":0},{"_id":"source/img/image-20230522155235201.png","path":"img/image-20230522155235201.png","modified":0,"renderable":0},{"_id":"source/img/image-20230521212545143.png","path":"img/image-20230521212545143.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"0f59e597252d6276c39e3a681784f565cf5d0648","modified":1690700156382},{"_id":"source/_posts/23-7-30-1.md","hash":"7b3427ea72745b854c73a569a15dfec1f7ceff66","modified":1690701334495},{"_id":"source/_posts/23-7-30-3.md","hash":"61b3ce3d2621612528b3fc0d3c216866cd9cf803","modified":1690706149319},{"_id":"source/_posts/23-7-30-2.md","hash":"6b6b1d8d529a45aab4abd951190bb42201d3a61a","modified":1690706131604},{"_id":"source/about/index.md","hash":"0d245c704a80307838f68eb1f73d454fd79a1b1a","modified":1690703060413},{"_id":"source/movies/index.md","hash":"26985395e888cff89dc1165a84176944d51fd2ac","modified":1690702973945},{"_id":"source/link/index.md","hash":"a955f82c47a818df2e256a5b62bff5e9b6f0e969","modified":1690800802174},{"_id":"source/music/index.md","hash":"ec28a4ffeb0c9dff494f76e634a7fb49e127da18","modified":1690702977803},{"_id":"source/tags/index.md","hash":"4344893e28a690daceb46883496e4058ce401d68","modified":1690800802176},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1690642493580},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1690642494818},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1690642494795},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"459517785a7161e07c333bfe2900243b6287f905","modified":1690800873167},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"656d8b548940d7d214459cd8853007af38e6c465","modified":1690642494781},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1690642496752},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1690642496731},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1690642496740},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1690642496785},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1690642496792},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1690642494973},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1690642495259},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1690642495562},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1690642495680},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1690642495742},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1690642495859},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1690642496721},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1690642496726},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1690642496744},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1690642496759},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1690642496763},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1690642494842},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1690642494918},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1690642495412},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1690642495463},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1690642495593},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1690642495687},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1690642495806},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1690642495825},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1690642493841},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1690642494218},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1690642494241},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1690642494390},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1690642494649},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1690642494772},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1690642494591},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1690642494609},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1690642494015},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1690642494092},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1690642494262},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1690642494411},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1690642494569},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1690642494623},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1690642494187},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1690642494289},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1690642494321},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1690642494362},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1690642494428},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1690642494446},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1690642494533},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1690642494548},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1690642494643},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1690642494664},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1690642494678},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1690642496166},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1690642496699},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690642493790},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690642494826},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690642493730},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690642494510},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690642494696},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690642494758},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1690642495664},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1690642494955},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1690642495284},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1690642495274},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1690642495457},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1690642495658},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1690642495746},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1690642495763},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1690642495829},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1690642495476},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1690642495627},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1690642495650},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1690642495838},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1690642495721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1690642495420},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1690642495480},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1690642495675},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1690642495012},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1690642495733},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1690642495257},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1690642495327},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1690642495408},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1690642495863},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1690642495712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1690642495797},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1690642494966},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1690642495387},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1690642495696},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1690642495754},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1690642495707},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1690642495846},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1690642495022},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1690642495028},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1690642495137},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1690642495171},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1690642495178},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1690642495191},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1690642495206},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1690642495217},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1690642495224},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1690642495229},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1690642495240},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1690642495249},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1690642495556},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1690642496010},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1690642496026},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1690642496030},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1690642496093},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1690642496110},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1690642496559},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1690642496578},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1690642496591},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1690642496608},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1690642496612},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1690642496621},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1690642496625},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1690642496684},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1690642496097},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1690642496144},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1690642496129},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1690642496677},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1690642496047},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1690642496596},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1690642495995},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1690642496023},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1690642495983},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1690642496040},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1690642496086},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1690642496138},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1690642496637},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1690642496017},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1690642496107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1690642496113},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1690642496123},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1690642496174},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1690642496177},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1690642496574},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1690642496628},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1690642496692},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1690642495990},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1690642496161},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1690642496563},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1690642493615},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690642493895},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690642494475},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1690642494887},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1690642495487},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1690642494982},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1690642495343},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1690642495397},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1690642495492},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1690642495775},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1690642495892},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1690642495923},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1690642495942},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1690642495295},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1690642495265},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1690642495323},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1690642495502},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1690642495873},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1690642495644},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1690642494992},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1690642495347},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1690642495362},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1690642495393},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1690642495428},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1690642495506},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1690642495440},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1690642495574},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1690642495601},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1690642495779},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1690642495902},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1690642495912},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1690642495956},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1690642495928},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1690642495510},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1690642495581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1690642495622},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1690642495332},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1690642495000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1690642495447},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1690642495637},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1690642495517},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1690642495879},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1690642495935},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1690642495787},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1690642495969},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1690642494939},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1690642495373},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1690642495526},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1690642495611},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1690642494904},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1690642494926},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1690642495530},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1690642495810},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1690642496063},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1690642496148},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1690642496156},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1690642496078},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1690642496551},{"_id":"public/search.xml","hash":"6b97e96c97440508fefab355224b3e431c5404a3","modified":1690706505672},{"_id":"public/404.html","hash":"b31da6e4942288840d4835ea0d35e8bdb929c541","modified":1690706505672},{"_id":"public/about/index.html","hash":"fccc4975fe6c3e17a42b38b937f06977eb062980","modified":1690706505672},{"_id":"public/movies/index.html","hash":"3277407e010554198c6a9659158035b7fee2e127","modified":1690706505672},{"_id":"public/link/index.html","hash":"66d98d8aeb704237aabd66a3de88005acc361de0","modified":1690706505672},{"_id":"public/music/index.html","hash":"3891d634e67cfe23a289fce845aa842ab92e60ce","modified":1690706505672},{"_id":"public/tags/index.html","hash":"802bf06dd3588755db8c3efdae1056c2a82b01b9","modified":1690706505672},{"_id":"public/2023/07/30/23-7-30-2/index.html","hash":"1e87321f0b7a5187d8b09a91c4edc40327f55ace","modified":1690706505672},{"_id":"public/2023/07/30/23-7-30-3/index.html","hash":"4ad0b681738f1da4a9a4cdd8cbe29415547bd546","modified":1690706505672},{"_id":"public/2023/07/29/23-7-30-1/index.html","hash":"72cb412bc7defc52bd9993066b7f5b52fa3d14a4","modified":1690706505672},{"_id":"public/archives/index.html","hash":"f43aa7be569955637b8fb9ac28890cd6cea0b78e","modified":1690706505672},{"_id":"public/archives/2023/index.html","hash":"960e6ab6bd866e284badc380ed056b6e88b98c34","modified":1690706505672},{"_id":"public/archives/2023/07/index.html","hash":"52b2db2fc38648992a8e8fee4e6b57a5e09c60c2","modified":1690706505672},{"_id":"public/index.html","hash":"853c928f0ec28d1458084eac54912aee7ae0db67","modified":1690706505672},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690706505672},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690706505672},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690706505672},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690706505672},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690706505672},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690706505672},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690706505672},{"_id":"public/css/index.css","hash":"83dda1898f16f23c21ec29684d71d5aea3673438","modified":1690706505672},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690706505672},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690706505672},{"_id":"source/img/image-20221025163441508.png","hash":"2e43c4eb972012600560f344b8be281ff8c2a124","modified":1666686881000},{"_id":"source/img/image-20221025164401144.png","hash":"c48e274f036a0fd0fb439c914c5ed12789f6f200","modified":1666687441000},{"_id":"source/_posts/22-08-05-2.md","hash":"c05b86c0550978486c6800da70d3c967ff27ddd2","modified":1690804278774},{"_id":"source/img/image-20221025164457908.png","hash":"0c38daa0d29c83b4e1293dc5dd55131a7165c3ae","modified":1666687497000},{"_id":"source/_posts/22-08-10-3.md","hash":"e2661d252bd72afb0079a81cb3324fffd58cd2d3","modified":1690804783261},{"_id":"source/img/image-20221025164618940.png","hash":"d82a619c168b8c6c1207a3141f99fe218a5a47ed","modified":1666687578000},{"_id":"source/img/image-20221025164539512.png","hash":"7ff12c6efe4207f5895c013b66a1887aa8d2b7e3","modified":1666687539000},{"_id":"source/_posts/22-07-30-1.md","hash":"5309a8bd0b16d0c7aa1fd7b4613ec83f2f8fe25e","modified":1690801607667},{"_id":"source/img/image-20221025164652215.png","hash":"5780d749fe78276e82701c81670ae8c2621b858a","modified":1666687612000},{"_id":"source/img/image-20230522155235201.png","hash":"7f336dadfdf5caeb1b5faed51c1dfa8c313912e2","modified":1684741955000},{"_id":"source/img/image-20230521163900590.png","hash":"9177615d99e1a32c195e7e23175024cab96086cb","modified":1684658340000},{"_id":"source/img/image-20230521212411230.png","hash":"9d9f605208c583294180575dd2e684731da12e23","modified":1684675451000},{"_id":"source/img/image-20230521212545143.png","hash":"b7cbf2e5d884c20144895bd5de78b1a9dda1ded1","modified":1684675545000},{"_id":"source/img/image-20230521192401756.png","hash":"ded7217fbcde7d7d3afabe2f5bb451c847c9b1b6","modified":1684668241000},{"_id":"source/img/image-20230521212323764.png","hash":"ecc801664aaf8fd52c2ec4a27f80741829575038","modified":1684675403000},{"_id":"source/img/image-20230521193406678.png","hash":"8f3abd4b93be9ad8b3918d61ce04f03e785ad4c6","modified":1684668846000},{"_id":"source/img/image-20230521164959631.png","hash":"db34597878f6e101f34c15591ae0d1fd9f8f4088","modified":1684658999000}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}],"Page":[{"title":"关于","date":"2023-07-29T15:00:35.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-07-29 23:00:35\n---\n","updated":"2023-07-30T07:44:20.413Z","path":"about/index.html","comments":1,"layout":"page","_id":"clkp7020z0000n8qo60fc0yb3","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_10.webp","cover_type":"img","excerpt":"","more":""},{"title":"电影","date":"2023-07-29T15:00:35.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: 电影\ndate: 2023-07-29 23:00:35\n---\n","updated":"2023-07-30T07:42:53.945Z","path":"movies/index.html","comments":1,"layout":"page","_id":"clkp7021e0002n8qodtvz4uzn","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_5.webp","cover_type":"img","excerpt":"","more":""},{"title":"link","date":"2023-07-29T15:00:35.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-07-29 23:00:35\ntype: 'link'\n---\n","updated":"2023-07-30T06:55:56.402Z","path":"link/index.html","comments":1,"layout":"page","_id":"clkp7021m0004n8qo1bvy5a7u","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_2.webp","cover_type":"img","excerpt":"","more":""},{"title":"音乐","date":"2023-07-29T15:00:35.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2023-07-29 23:00:35\n---\n","updated":"2023-07-30T07:42:57.803Z","path":"music/index.html","comments":1,"layout":"page","_id":"clkp7021r0006n8qohglj5w7r","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_5.webp","cover_type":"img","excerpt":"","more":""},{"title":"tags","date":"2023-07-29T14:59:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-07-29 22:59:47\ntype: 'tags'\n---\n","updated":"2023-07-30T06:55:56.443Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clkp7021s0007n8qo9zas7v7b","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_2.webp","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"第 一 篇文章 React底层原理","date":"2022-07-30T15:00:35.000Z","_content":"# React 底层原理\n\n至此我们介绍了react的理念，如何解决cpu和io的瓶颈，关键是实现异步可中断的更新\n\n我们介绍了react源码架构（ui=fn(state)），从scheduler开始调度（根据过期事件判断优先级，时间分片），经过render阶段的深度优先遍历形成effectList（中间会执行reconcile|diff），交给commit处理真实节点（中间穿插生命周期和部分hooks），而这些调度的过程都离不开Fiber的支撑，**Fiber是工作单元，也是节点优先级、更新UpdateQueue、节点信息的载体**，Fiber双缓存则提供了对比前后节点更新的基础。我们还介绍了jsx是React.createElement的语法糖。Lane模型则提供了更细粒度的优先级对比和计算，这一切都为concurrent mode提供了基础，在这之上变可以实现Suspense和batchedUpdate（16、17版本实现的逻辑不一样），context的valueStack和valueCursor在整个架构中运行机制，最后介绍了新版事件系统，包括事件生产、监听和触发\n\n## 1. react的架构\n\nhttps://juejin.cn/post/7211072055780573221#heading-0\n\nhttps://juejin.cn/post/6926432527980691470\n\n作为架构来说，之前`React15`的`Reconciler`采用递归的方式执行，数据保存在递归调用栈中，所以被称为`stack Reconciler`。`React16`的`Reconciler`基于`Fiber节点`实现，被称为`Fiber Reconciler`。\n\n新版React架构分为三大部分：\n\n- Scheduler调度器：  排序优先级，让优先级高的任务先进行reconcile\n- Reconciler协调器：接受更新，创建虚拟dom树，找出哪些节点发生了改变，并打上不同的effectTag\n- Renderer渲染器：将Reconciler中打好标签的节点渲染到视图上\n\n\n\nFiber这种数据结构后，能完成哪些事情呢，\n\n- **工作单元 任务分解** ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树\n- **增量渲染**：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上\n- **根据优先级暂停、继续、排列优先级**：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础\n- **保存状态：**因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks\n- https://songhaoyong.blogspot.com/2023/07/react.html\n\n## 2. render阶段\n\nrender：Reconciler工作的阶段被称为render阶段。因为在该阶段会调用组件的render方法\n\nrender阶段的主要工作是构建Fiber树和生成effectList\n\n开始工作前会先找到div#root对应的`rootFiber，称为`hostRootFiber`，然后开始生成`wip Fiber树`。 这个过程分为两个部分：beginWork`和completeWork。 这是一个深度优先遍历的过程。\n\n**beginwork**:主要的工作是创建或复用子fiber节点（同时涉及到diff算法，为结点打上effectTags）\n\n从根节点rootFiber开始，遍历到叶子节点，每次遍历到的节点都会执行beginWork，并且传入当前Fiber节点，然后创建或复用它的子Fiber节点，并赋值给workInProgress.child。\n\n**completework**:主要工作是处理fiber的props、创建dom、创建effectList \n\n1、(处理props将变化的部分賦值给workInProgerss.updateQueue)\n\n2、mount时 调用createInstance创建dom，将后代dom节点插入刚创建的dom中\n\n3、将effectTag的节点，加入到effectList中\n\n当遍历到子节点后，会执行completeWork方法，执行完成之后会判断此节点的兄弟节点存不存在，如果存在就会为兄弟节点执行completeWork，当全部兄弟节点执行完之后，会向上回到父节点执行completeWork，直到rootFiber。\n\n\n\nshouldYiled 方法就是判断待处理的任务队列有没有优先级更高的任务，有的话就先处理那边的 fiber，这边的先暂停一下。\n\n## 3. commit阶段\n\ncommit：Renderer工作的阶段被称为commit阶段。commit阶段会把render阶段提交的信息渲染在页面上\n\n遍历render阶段生成的effectList，effectList上的Fiber节点保存着对应的props变化。之后会遍历effectList进行对应的dom操作和生命周期、hooks回调或销毁函数。\n\n**commit阶段**的主要工作（即Renderer的工作流程）分为三部分：\n\n- before mutation阶段（执行DOM操作前）\n\n​\t\t这个阶段 DOM 节点还没有被渲染到界面上去，过程中会触发 `getSnapshotBeforeUpdate`，也会处理 `useEffect` 钩子相关的调度逻辑。\n\n- mutation阶段（执行DOM操作）\n\n​\t\t这个阶段负责 DOM 节点的渲染。在渲染过程中，会遍历 effectList，根据effectTag的不同，执行不同的 DOM 操作。\n\n- layout阶段（执行DOM操作后）\n\n  这个阶段处理 DOM 渲染完毕之后的收尾逻辑。比如调用 `componentDidMount/componentDidUpdate`，调用 `useLayoutEffect` 钩子函数的回调等。除了这些之外，它还会把 fiberRoot 的 current 指针指向 workInProgress Fiber 树。\n\n\n## 4. render函数\n\n**legacy模式**\n\nrender调用legacyRenderSubtreeIntoContainer，作用是\n\n1、创建FiberRootNode和rootFiber节点, （调用createRootImpl，其会调用到createFiberRoot创建fiberRootNode,然后调用createHostRootFiber创建rootFiber）\n\n2、调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后执行scheduleUpdateOnFiber调用performSyncWorkOnRoot进入render阶段和commit阶段）\n\n**concurrent模式：**\n\n调用ReactDOMRoot.prototype.render执行updateContainer，调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后scheduleUpdateOnFiber异步调度performConcurrentWorkOnRoot进入render阶段和commit阶段）\n\n## 5. fiber\n\nFiber是一个js对象，能承载节点信息、优先级、updateQueue，同时它还是一个工作单元。\n\n- **工作单元 任务分解** ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树\n- **增量渲染**：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上。（`fiber`将`react`中的渲染任务拆分到每一帧）\n- **根据优先级暂停、继续、排列优先级**：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础\n- **保存状态：**因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks\n\n## 6. hooks的实现原理\n\n**在函数式组件中，hooks 的实现就是基于 fiber 的，多个hook会形成hook链表，保存在Fiber的memoizedState的上**。hook不能写在条件判断中正因为hook会按顺序存储在链表中，如果hook写在条件判断中，就没法保持链表的顺序，会造成乱序。\n\nhook调用入口\n\n在hook源码中hook存在于Dispatcher中，Dispatcher就是一个对象，不同hook 调用的函数不一样，全局变量ReactCurrentDispatcher.current会根据是mount还是update赋值为HooksDispatcherOnMount或HooksDispatcherOnUpdate。\n\n\n\nusestate的工作原理\n\n\n\nuseState分为onMount和upDate两种情况，通过全局变量ReactCurrentDispatcher.current来判断。\n\nonMount时，hook.memoizedState记录初始的值\n\nupdate更新时：\n\n其中hooks的`memoizedState`是用来记录这个`useState`应该返回的结果的，而`next`指向的是下一次`useState`对应的`Hook对象。\n\n\n\nmemoizedState装着state，而dispatchAction 就是setState\n\ndispatchAction 创建新的update对象，将这些更新对象放到hook.queue.pending的环形链表中，最后重新渲染app\n\n\n\nhooks的数据结构\n\n```js\nconst hook: Hook = {\n  memoizedState: null,//对于不同hook，有不同的值\n  baseState: null,//初始state\n  baseQueue: null,//初始queue队列\n  queue: null // { pending:这是一个链表储存着update},//需要更新的update\n  next: null,//下一个hook\n};\n```\n\n## 7、react的状态更新流程\n\n<img src=\"img/image-20230511104437245.png\" alt=\"image-20230511104437245\" style=\"zoom:150%;\" />\n\n触发更新后，会在函数createUpdate中创建update更新，并将其加入到updateQueue中，会从触发更新的节点开始向上遍历到rootFiber，遍历的过程会处理节点的优先级。然后根据优先级调度render阶段的入口函数。最后进行render阶段和commit阶段。\n","source":"_posts/22-07-30-1.md","raw":"---\ntitle: 第 一 篇文章 React底层原理\ndate: 2022-07-30 23:00:35\n---\n# React 底层原理\n\n至此我们介绍了react的理念，如何解决cpu和io的瓶颈，关键是实现异步可中断的更新\n\n我们介绍了react源码架构（ui=fn(state)），从scheduler开始调度（根据过期事件判断优先级，时间分片），经过render阶段的深度优先遍历形成effectList（中间会执行reconcile|diff），交给commit处理真实节点（中间穿插生命周期和部分hooks），而这些调度的过程都离不开Fiber的支撑，**Fiber是工作单元，也是节点优先级、更新UpdateQueue、节点信息的载体**，Fiber双缓存则提供了对比前后节点更新的基础。我们还介绍了jsx是React.createElement的语法糖。Lane模型则提供了更细粒度的优先级对比和计算，这一切都为concurrent mode提供了基础，在这之上变可以实现Suspense和batchedUpdate（16、17版本实现的逻辑不一样），context的valueStack和valueCursor在整个架构中运行机制，最后介绍了新版事件系统，包括事件生产、监听和触发\n\n## 1. react的架构\n\nhttps://juejin.cn/post/7211072055780573221#heading-0\n\nhttps://juejin.cn/post/6926432527980691470\n\n作为架构来说，之前`React15`的`Reconciler`采用递归的方式执行，数据保存在递归调用栈中，所以被称为`stack Reconciler`。`React16`的`Reconciler`基于`Fiber节点`实现，被称为`Fiber Reconciler`。\n\n新版React架构分为三大部分：\n\n- Scheduler调度器：  排序优先级，让优先级高的任务先进行reconcile\n- Reconciler协调器：接受更新，创建虚拟dom树，找出哪些节点发生了改变，并打上不同的effectTag\n- Renderer渲染器：将Reconciler中打好标签的节点渲染到视图上\n\n\n\nFiber这种数据结构后，能完成哪些事情呢，\n\n- **工作单元 任务分解** ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树\n- **增量渲染**：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上\n- **根据优先级暂停、继续、排列优先级**：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础\n- **保存状态：**因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks\n- https://songhaoyong.blogspot.com/2023/07/react.html\n\n## 2. render阶段\n\nrender：Reconciler工作的阶段被称为render阶段。因为在该阶段会调用组件的render方法\n\nrender阶段的主要工作是构建Fiber树和生成effectList\n\n开始工作前会先找到div#root对应的`rootFiber，称为`hostRootFiber`，然后开始生成`wip Fiber树`。 这个过程分为两个部分：beginWork`和completeWork。 这是一个深度优先遍历的过程。\n\n**beginwork**:主要的工作是创建或复用子fiber节点（同时涉及到diff算法，为结点打上effectTags）\n\n从根节点rootFiber开始，遍历到叶子节点，每次遍历到的节点都会执行beginWork，并且传入当前Fiber节点，然后创建或复用它的子Fiber节点，并赋值给workInProgress.child。\n\n**completework**:主要工作是处理fiber的props、创建dom、创建effectList \n\n1、(处理props将变化的部分賦值给workInProgerss.updateQueue)\n\n2、mount时 调用createInstance创建dom，将后代dom节点插入刚创建的dom中\n\n3、将effectTag的节点，加入到effectList中\n\n当遍历到子节点后，会执行completeWork方法，执行完成之后会判断此节点的兄弟节点存不存在，如果存在就会为兄弟节点执行completeWork，当全部兄弟节点执行完之后，会向上回到父节点执行completeWork，直到rootFiber。\n\n\n\nshouldYiled 方法就是判断待处理的任务队列有没有优先级更高的任务，有的话就先处理那边的 fiber，这边的先暂停一下。\n\n## 3. commit阶段\n\ncommit：Renderer工作的阶段被称为commit阶段。commit阶段会把render阶段提交的信息渲染在页面上\n\n遍历render阶段生成的effectList，effectList上的Fiber节点保存着对应的props变化。之后会遍历effectList进行对应的dom操作和生命周期、hooks回调或销毁函数。\n\n**commit阶段**的主要工作（即Renderer的工作流程）分为三部分：\n\n- before mutation阶段（执行DOM操作前）\n\n​\t\t这个阶段 DOM 节点还没有被渲染到界面上去，过程中会触发 `getSnapshotBeforeUpdate`，也会处理 `useEffect` 钩子相关的调度逻辑。\n\n- mutation阶段（执行DOM操作）\n\n​\t\t这个阶段负责 DOM 节点的渲染。在渲染过程中，会遍历 effectList，根据effectTag的不同，执行不同的 DOM 操作。\n\n- layout阶段（执行DOM操作后）\n\n  这个阶段处理 DOM 渲染完毕之后的收尾逻辑。比如调用 `componentDidMount/componentDidUpdate`，调用 `useLayoutEffect` 钩子函数的回调等。除了这些之外，它还会把 fiberRoot 的 current 指针指向 workInProgress Fiber 树。\n\n\n## 4. render函数\n\n**legacy模式**\n\nrender调用legacyRenderSubtreeIntoContainer，作用是\n\n1、创建FiberRootNode和rootFiber节点, （调用createRootImpl，其会调用到createFiberRoot创建fiberRootNode,然后调用createHostRootFiber创建rootFiber）\n\n2、调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后执行scheduleUpdateOnFiber调用performSyncWorkOnRoot进入render阶段和commit阶段）\n\n**concurrent模式：**\n\n调用ReactDOMRoot.prototype.render执行updateContainer，调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后scheduleUpdateOnFiber异步调度performConcurrentWorkOnRoot进入render阶段和commit阶段）\n\n## 5. fiber\n\nFiber是一个js对象，能承载节点信息、优先级、updateQueue，同时它还是一个工作单元。\n\n- **工作单元 任务分解** ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树\n- **增量渲染**：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上。（`fiber`将`react`中的渲染任务拆分到每一帧）\n- **根据优先级暂停、继续、排列优先级**：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础\n- **保存状态：**因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks\n\n## 6. hooks的实现原理\n\n**在函数式组件中，hooks 的实现就是基于 fiber 的，多个hook会形成hook链表，保存在Fiber的memoizedState的上**。hook不能写在条件判断中正因为hook会按顺序存储在链表中，如果hook写在条件判断中，就没法保持链表的顺序，会造成乱序。\n\nhook调用入口\n\n在hook源码中hook存在于Dispatcher中，Dispatcher就是一个对象，不同hook 调用的函数不一样，全局变量ReactCurrentDispatcher.current会根据是mount还是update赋值为HooksDispatcherOnMount或HooksDispatcherOnUpdate。\n\n\n\nusestate的工作原理\n\n\n\nuseState分为onMount和upDate两种情况，通过全局变量ReactCurrentDispatcher.current来判断。\n\nonMount时，hook.memoizedState记录初始的值\n\nupdate更新时：\n\n其中hooks的`memoizedState`是用来记录这个`useState`应该返回的结果的，而`next`指向的是下一次`useState`对应的`Hook对象。\n\n\n\nmemoizedState装着state，而dispatchAction 就是setState\n\ndispatchAction 创建新的update对象，将这些更新对象放到hook.queue.pending的环形链表中，最后重新渲染app\n\n\n\nhooks的数据结构\n\n```js\nconst hook: Hook = {\n  memoizedState: null,//对于不同hook，有不同的值\n  baseState: null,//初始state\n  baseQueue: null,//初始queue队列\n  queue: null // { pending:这是一个链表储存着update},//需要更新的update\n  next: null,//下一个hook\n};\n```\n\n## 7、react的状态更新流程\n\n<img src=\"img/image-20230511104437245.png\" alt=\"image-20230511104437245\" style=\"zoom:150%;\" />\n\n触发更新后，会在函数createUpdate中创建update更新，并将其加入到updateQueue中，会从触发更新的节点开始向上遍历到rootFiber，遍历的过程会处理节点的优先级。然后根据优先级调度render阶段的入口函数。最后进行render阶段和commit阶段。\n","slug":"22-07-30-1","published":1,"updated":"2023-07-31T11:06:47.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkrly5ll0000pcupctxu385x","content":"<h1 id=\"React-底层原理\"><a href=\"#React-底层原理\" class=\"headerlink\" title=\"React 底层原理\"></a>React 底层原理</h1><p>至此我们介绍了react的理念，如何解决cpu和io的瓶颈，关键是实现异步可中断的更新</p>\n<p>我们介绍了react源码架构（ui&#x3D;fn(state)），从scheduler开始调度（根据过期事件判断优先级，时间分片），经过render阶段的深度优先遍历形成effectList（中间会执行reconcile|diff），交给commit处理真实节点（中间穿插生命周期和部分hooks），而这些调度的过程都离不开Fiber的支撑，<strong>Fiber是工作单元，也是节点优先级、更新UpdateQueue、节点信息的载体</strong>，Fiber双缓存则提供了对比前后节点更新的基础。我们还介绍了jsx是React.createElement的语法糖。Lane模型则提供了更细粒度的优先级对比和计算，这一切都为concurrent mode提供了基础，在这之上变可以实现Suspense和batchedUpdate（16、17版本实现的逻辑不一样），context的valueStack和valueCursor在整个架构中运行机制，最后介绍了新版事件系统，包括事件生产、监听和触发</p>\n<h2 id=\"1-react的架构\"><a href=\"#1-react的架构\" class=\"headerlink\" title=\"1. react的架构\"></a>1. react的架构</h2><p><a href=\"https://juejin.cn/post/7211072055780573221#heading-0\">https://juejin.cn/post/7211072055780573221#heading-0</a></p>\n<p><a href=\"https://juejin.cn/post/6926432527980691470\">https://juejin.cn/post/6926432527980691470</a></p>\n<p>作为架构来说，之前<code>React15</code>的<code>Reconciler</code>采用递归的方式执行，数据保存在递归调用栈中，所以被称为<code>stack Reconciler</code>。<code>React16</code>的<code>Reconciler</code>基于<code>Fiber节点</code>实现，被称为<code>Fiber Reconciler</code>。</p>\n<p>新版React架构分为三大部分：</p>\n<ul>\n<li>Scheduler调度器：  排序优先级，让优先级高的任务先进行reconcile</li>\n<li>Reconciler协调器：接受更新，创建虚拟dom树，找出哪些节点发生了改变，并打上不同的effectTag</li>\n<li>Renderer渲染器：将Reconciler中打好标签的节点渲染到视图上</li>\n</ul>\n<p>Fiber这种数据结构后，能完成哪些事情呢，</p>\n<ul>\n<li><strong>工作单元 任务分解</strong> ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树</li>\n<li><strong>增量渲染</strong>：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上</li>\n<li><strong>根据优先级暂停、继续、排列优先级</strong>：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础</li>\n<li><strong>保存状态：</strong>因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks</li>\n<li><a href=\"https://songhaoyong.blogspot.com/2023/07/react.html\">https://songhaoyong.blogspot.com/2023/07/react.html</a></li>\n</ul>\n<h2 id=\"2-render阶段\"><a href=\"#2-render阶段\" class=\"headerlink\" title=\"2. render阶段\"></a>2. render阶段</h2><p>render：Reconciler工作的阶段被称为render阶段。因为在该阶段会调用组件的render方法</p>\n<p>render阶段的主要工作是构建Fiber树和生成effectList</p>\n<p>开始工作前会先找到div#root对应的<code>rootFiber，称为</code>hostRootFiber<code>，然后开始生成</code>wip Fiber树<code>。 这个过程分为两个部分：beginWork</code>和completeWork。 这是一个深度优先遍历的过程。</p>\n<p><strong>beginwork</strong>:主要的工作是创建或复用子fiber节点（同时涉及到diff算法，为结点打上effectTags）</p>\n<p>从根节点rootFiber开始，遍历到叶子节点，每次遍历到的节点都会执行beginWork，并且传入当前Fiber节点，然后创建或复用它的子Fiber节点，并赋值给workInProgress.child。</p>\n<p><strong>completework</strong>:主要工作是处理fiber的props、创建dom、创建effectList </p>\n<p>1、(处理props将变化的部分賦值给workInProgerss.updateQueue)</p>\n<p>2、mount时 调用createInstance创建dom，将后代dom节点插入刚创建的dom中</p>\n<p>3、将effectTag的节点，加入到effectList中</p>\n<p>当遍历到子节点后，会执行completeWork方法，执行完成之后会判断此节点的兄弟节点存不存在，如果存在就会为兄弟节点执行completeWork，当全部兄弟节点执行完之后，会向上回到父节点执行completeWork，直到rootFiber。</p>\n<p>shouldYiled 方法就是判断待处理的任务队列有没有优先级更高的任务，有的话就先处理那边的 fiber，这边的先暂停一下。</p>\n<h2 id=\"3-commit阶段\"><a href=\"#3-commit阶段\" class=\"headerlink\" title=\"3. commit阶段\"></a>3. commit阶段</h2><p>commit：Renderer工作的阶段被称为commit阶段。commit阶段会把render阶段提交的信息渲染在页面上</p>\n<p>遍历render阶段生成的effectList，effectList上的Fiber节点保存着对应的props变化。之后会遍历effectList进行对应的dom操作和生命周期、hooks回调或销毁函数。</p>\n<p><strong>commit阶段</strong>的主要工作（即Renderer的工作流程）分为三部分：</p>\n<ul>\n<li>before mutation阶段（执行DOM操作前）</li>\n</ul>\n<p>​\t\t这个阶段 DOM 节点还没有被渲染到界面上去，过程中会触发 <code>getSnapshotBeforeUpdate</code>，也会处理 <code>useEffect</code> 钩子相关的调度逻辑。</p>\n<ul>\n<li>mutation阶段（执行DOM操作）</li>\n</ul>\n<p>​\t\t这个阶段负责 DOM 节点的渲染。在渲染过程中，会遍历 effectList，根据effectTag的不同，执行不同的 DOM 操作。</p>\n<ul>\n<li><p>layout阶段（执行DOM操作后）</p>\n<p>这个阶段处理 DOM 渲染完毕之后的收尾逻辑。比如调用 <code>componentDidMount/componentDidUpdate</code>，调用 <code>useLayoutEffect</code> 钩子函数的回调等。除了这些之外，它还会把 fiberRoot 的 current 指针指向 workInProgress Fiber 树。</p>\n</li>\n</ul>\n<h2 id=\"4-render函数\"><a href=\"#4-render函数\" class=\"headerlink\" title=\"4. render函数\"></a>4. render函数</h2><p><strong>legacy模式</strong></p>\n<p>render调用legacyRenderSubtreeIntoContainer，作用是</p>\n<p>1、创建FiberRootNode和rootFiber节点, （调用createRootImpl，其会调用到createFiberRoot创建fiberRootNode,然后调用createHostRootFiber创建rootFiber）</p>\n<p>2、调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后执行scheduleUpdateOnFiber调用performSyncWorkOnRoot进入render阶段和commit阶段）</p>\n<p><strong>concurrent模式：</strong></p>\n<p>调用ReactDOMRoot.prototype.render执行updateContainer，调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后scheduleUpdateOnFiber异步调度performConcurrentWorkOnRoot进入render阶段和commit阶段）</p>\n<h2 id=\"5-fiber\"><a href=\"#5-fiber\" class=\"headerlink\" title=\"5. fiber\"></a>5. fiber</h2><p>Fiber是一个js对象，能承载节点信息、优先级、updateQueue，同时它还是一个工作单元。</p>\n<ul>\n<li><strong>工作单元 任务分解</strong> ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树</li>\n<li><strong>增量渲染</strong>：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上。（<code>fiber</code>将<code>react</code>中的渲染任务拆分到每一帧）</li>\n<li><strong>根据优先级暂停、继续、排列优先级</strong>：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础</li>\n<li><strong>保存状态：</strong>因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks</li>\n</ul>\n<h2 id=\"6-hooks的实现原理\"><a href=\"#6-hooks的实现原理\" class=\"headerlink\" title=\"6. hooks的实现原理\"></a>6. hooks的实现原理</h2><p><strong>在函数式组件中，hooks 的实现就是基于 fiber 的，多个hook会形成hook链表，保存在Fiber的memoizedState的上</strong>。hook不能写在条件判断中正因为hook会按顺序存储在链表中，如果hook写在条件判断中，就没法保持链表的顺序，会造成乱序。</p>\n<p>hook调用入口</p>\n<p>在hook源码中hook存在于Dispatcher中，Dispatcher就是一个对象，不同hook 调用的函数不一样，全局变量ReactCurrentDispatcher.current会根据是mount还是update赋值为HooksDispatcherOnMount或HooksDispatcherOnUpdate。</p>\n<p>usestate的工作原理</p>\n<p>useState分为onMount和upDate两种情况，通过全局变量ReactCurrentDispatcher.current来判断。</p>\n<p>onMount时，hook.memoizedState记录初始的值</p>\n<p>update更新时：</p>\n<p>其中hooks的<code>memoizedState</code>是用来记录这个<code>useState</code>应该返回的结果的，而<code>next</code>指向的是下一次<code>useState</code>对应的&#96;Hook对象。</p>\n<p>memoizedState装着state，而dispatchAction 就是setState</p>\n<p>dispatchAction 创建新的update对象，将这些更新对象放到hook.queue.pending的环形链表中，最后重新渲染app</p>\n<p>hooks的数据结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">hook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//对于不同hook，有不同的值</span></span><br><span class=\"line\">  <span class=\"attr\">baseState</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//初始state</span></span><br><span class=\"line\">  <span class=\"attr\">baseQueue</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//初始queue队列</span></span><br><span class=\"line\">  <span class=\"attr\">queue</span>: <span class=\"literal\">null</span> <span class=\"comment\">// &#123; pending:这是一个链表储存着update&#125;,//需要更新的update</span></span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//下一个hook</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7、react的状态更新流程\"><a href=\"#7、react的状态更新流程\" class=\"headerlink\" title=\"7、react的状态更新流程\"></a>7、react的状态更新流程</h2><img src=\"img/image-20230511104437245.png\" alt=\"image-20230511104437245\" style=\"zoom:150%;\" />\n\n<p>触发更新后，会在函数createUpdate中创建update更新，并将其加入到updateQueue中，会从触发更新的节点开始向上遍历到rootFiber，遍历的过程会处理节点的优先级。然后根据优先级调度render阶段的入口函数。最后进行render阶段和commit阶段。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_1.webp","cover_type":"img","excerpt":"","more":"<h1 id=\"React-底层原理\"><a href=\"#React-底层原理\" class=\"headerlink\" title=\"React 底层原理\"></a>React 底层原理</h1><p>至此我们介绍了react的理念，如何解决cpu和io的瓶颈，关键是实现异步可中断的更新</p>\n<p>我们介绍了react源码架构（ui&#x3D;fn(state)），从scheduler开始调度（根据过期事件判断优先级，时间分片），经过render阶段的深度优先遍历形成effectList（中间会执行reconcile|diff），交给commit处理真实节点（中间穿插生命周期和部分hooks），而这些调度的过程都离不开Fiber的支撑，<strong>Fiber是工作单元，也是节点优先级、更新UpdateQueue、节点信息的载体</strong>，Fiber双缓存则提供了对比前后节点更新的基础。我们还介绍了jsx是React.createElement的语法糖。Lane模型则提供了更细粒度的优先级对比和计算，这一切都为concurrent mode提供了基础，在这之上变可以实现Suspense和batchedUpdate（16、17版本实现的逻辑不一样），context的valueStack和valueCursor在整个架构中运行机制，最后介绍了新版事件系统，包括事件生产、监听和触发</p>\n<h2 id=\"1-react的架构\"><a href=\"#1-react的架构\" class=\"headerlink\" title=\"1. react的架构\"></a>1. react的架构</h2><p><a href=\"https://juejin.cn/post/7211072055780573221#heading-0\">https://juejin.cn/post/7211072055780573221#heading-0</a></p>\n<p><a href=\"https://juejin.cn/post/6926432527980691470\">https://juejin.cn/post/6926432527980691470</a></p>\n<p>作为架构来说，之前<code>React15</code>的<code>Reconciler</code>采用递归的方式执行，数据保存在递归调用栈中，所以被称为<code>stack Reconciler</code>。<code>React16</code>的<code>Reconciler</code>基于<code>Fiber节点</code>实现，被称为<code>Fiber Reconciler</code>。</p>\n<p>新版React架构分为三大部分：</p>\n<ul>\n<li>Scheduler调度器：  排序优先级，让优先级高的任务先进行reconcile</li>\n<li>Reconciler协调器：接受更新，创建虚拟dom树，找出哪些节点发生了改变，并打上不同的effectTag</li>\n<li>Renderer渲染器：将Reconciler中打好标签的节点渲染到视图上</li>\n</ul>\n<p>Fiber这种数据结构后，能完成哪些事情呢，</p>\n<ul>\n<li><strong>工作单元 任务分解</strong> ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树</li>\n<li><strong>增量渲染</strong>：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上</li>\n<li><strong>根据优先级暂停、继续、排列优先级</strong>：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础</li>\n<li><strong>保存状态：</strong>因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks</li>\n<li><a href=\"https://songhaoyong.blogspot.com/2023/07/react.html\">https://songhaoyong.blogspot.com/2023/07/react.html</a></li>\n</ul>\n<h2 id=\"2-render阶段\"><a href=\"#2-render阶段\" class=\"headerlink\" title=\"2. render阶段\"></a>2. render阶段</h2><p>render：Reconciler工作的阶段被称为render阶段。因为在该阶段会调用组件的render方法</p>\n<p>render阶段的主要工作是构建Fiber树和生成effectList</p>\n<p>开始工作前会先找到div#root对应的<code>rootFiber，称为</code>hostRootFiber<code>，然后开始生成</code>wip Fiber树<code>。 这个过程分为两个部分：beginWork</code>和completeWork。 这是一个深度优先遍历的过程。</p>\n<p><strong>beginwork</strong>:主要的工作是创建或复用子fiber节点（同时涉及到diff算法，为结点打上effectTags）</p>\n<p>从根节点rootFiber开始，遍历到叶子节点，每次遍历到的节点都会执行beginWork，并且传入当前Fiber节点，然后创建或复用它的子Fiber节点，并赋值给workInProgress.child。</p>\n<p><strong>completework</strong>:主要工作是处理fiber的props、创建dom、创建effectList </p>\n<p>1、(处理props将变化的部分賦值给workInProgerss.updateQueue)</p>\n<p>2、mount时 调用createInstance创建dom，将后代dom节点插入刚创建的dom中</p>\n<p>3、将effectTag的节点，加入到effectList中</p>\n<p>当遍历到子节点后，会执行completeWork方法，执行完成之后会判断此节点的兄弟节点存不存在，如果存在就会为兄弟节点执行completeWork，当全部兄弟节点执行完之后，会向上回到父节点执行completeWork，直到rootFiber。</p>\n<p>shouldYiled 方法就是判断待处理的任务队列有没有优先级更高的任务，有的话就先处理那边的 fiber，这边的先暂停一下。</p>\n<h2 id=\"3-commit阶段\"><a href=\"#3-commit阶段\" class=\"headerlink\" title=\"3. commit阶段\"></a>3. commit阶段</h2><p>commit：Renderer工作的阶段被称为commit阶段。commit阶段会把render阶段提交的信息渲染在页面上</p>\n<p>遍历render阶段生成的effectList，effectList上的Fiber节点保存着对应的props变化。之后会遍历effectList进行对应的dom操作和生命周期、hooks回调或销毁函数。</p>\n<p><strong>commit阶段</strong>的主要工作（即Renderer的工作流程）分为三部分：</p>\n<ul>\n<li>before mutation阶段（执行DOM操作前）</li>\n</ul>\n<p>​\t\t这个阶段 DOM 节点还没有被渲染到界面上去，过程中会触发 <code>getSnapshotBeforeUpdate</code>，也会处理 <code>useEffect</code> 钩子相关的调度逻辑。</p>\n<ul>\n<li>mutation阶段（执行DOM操作）</li>\n</ul>\n<p>​\t\t这个阶段负责 DOM 节点的渲染。在渲染过程中，会遍历 effectList，根据effectTag的不同，执行不同的 DOM 操作。</p>\n<ul>\n<li><p>layout阶段（执行DOM操作后）</p>\n<p>这个阶段处理 DOM 渲染完毕之后的收尾逻辑。比如调用 <code>componentDidMount/componentDidUpdate</code>，调用 <code>useLayoutEffect</code> 钩子函数的回调等。除了这些之外，它还会把 fiberRoot 的 current 指针指向 workInProgress Fiber 树。</p>\n</li>\n</ul>\n<h2 id=\"4-render函数\"><a href=\"#4-render函数\" class=\"headerlink\" title=\"4. render函数\"></a>4. render函数</h2><p><strong>legacy模式</strong></p>\n<p>render调用legacyRenderSubtreeIntoContainer，作用是</p>\n<p>1、创建FiberRootNode和rootFiber节点, （调用createRootImpl，其会调用到createFiberRoot创建fiberRootNode,然后调用createHostRootFiber创建rootFiber）</p>\n<p>2、调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后执行scheduleUpdateOnFiber调用performSyncWorkOnRoot进入render阶段和commit阶段）</p>\n<p><strong>concurrent模式：</strong></p>\n<p>调用ReactDOMRoot.prototype.render执行updateContainer，调用updateContainer创建创建Update对象挂载到updateQueue的环形链表上，（然后scheduleUpdateOnFiber异步调度performConcurrentWorkOnRoot进入render阶段和commit阶段）</p>\n<h2 id=\"5-fiber\"><a href=\"#5-fiber\" class=\"headerlink\" title=\"5. fiber\"></a>5. fiber</h2><p>Fiber是一个js对象，能承载节点信息、优先级、updateQueue，同时它还是一个工作单元。</p>\n<ul>\n<li><strong>工作单元 任务分解</strong> ：Fiber最重要的功能就是作为工作单元，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过指针的形似形成Fiber树</li>\n<li><strong>增量渲染</strong>：通过jsx对象和current Fiber的对比，生成最小的差异补丁，应用到真实节点上。（<code>fiber</code>将<code>react</code>中的渲染任务拆分到每一帧）</li>\n<li><strong>根据优先级暂停、继续、排列优先级</strong>：Fiber节点上保存了优先级，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense提供了基础</li>\n<li><strong>保存状态：</strong>因为Fiber能保存状态和更新的信息，所以就能实现函数组件的状态更新，也就是hooks</li>\n</ul>\n<h2 id=\"6-hooks的实现原理\"><a href=\"#6-hooks的实现原理\" class=\"headerlink\" title=\"6. hooks的实现原理\"></a>6. hooks的实现原理</h2><p><strong>在函数式组件中，hooks 的实现就是基于 fiber 的，多个hook会形成hook链表，保存在Fiber的memoizedState的上</strong>。hook不能写在条件判断中正因为hook会按顺序存储在链表中，如果hook写在条件判断中，就没法保持链表的顺序，会造成乱序。</p>\n<p>hook调用入口</p>\n<p>在hook源码中hook存在于Dispatcher中，Dispatcher就是一个对象，不同hook 调用的函数不一样，全局变量ReactCurrentDispatcher.current会根据是mount还是update赋值为HooksDispatcherOnMount或HooksDispatcherOnUpdate。</p>\n<p>usestate的工作原理</p>\n<p>useState分为onMount和upDate两种情况，通过全局变量ReactCurrentDispatcher.current来判断。</p>\n<p>onMount时，hook.memoizedState记录初始的值</p>\n<p>update更新时：</p>\n<p>其中hooks的<code>memoizedState</code>是用来记录这个<code>useState</code>应该返回的结果的，而<code>next</code>指向的是下一次<code>useState</code>对应的&#96;Hook对象。</p>\n<p>memoizedState装着state，而dispatchAction 就是setState</p>\n<p>dispatchAction 创建新的update对象，将这些更新对象放到hook.queue.pending的环形链表中，最后重新渲染app</p>\n<p>hooks的数据结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">hook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//对于不同hook，有不同的值</span></span><br><span class=\"line\">  <span class=\"attr\">baseState</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//初始state</span></span><br><span class=\"line\">  <span class=\"attr\">baseQueue</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//初始queue队列</span></span><br><span class=\"line\">  <span class=\"attr\">queue</span>: <span class=\"literal\">null</span> <span class=\"comment\">// &#123; pending:这是一个链表储存着update&#125;,//需要更新的update</span></span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,<span class=\"comment\">//下一个hook</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7、react的状态更新流程\"><a href=\"#7、react的状态更新流程\" class=\"headerlink\" title=\"7、react的状态更新流程\"></a>7、react的状态更新流程</h2><img src=\"img/image-20230511104437245.png\" alt=\"image-20230511104437245\" style=\"zoom:150%;\" />\n\n<p>触发更新后，会在函数createUpdate中创建update更新，并将其加入到updateQueue中，会从触发更新的节点开始向上遍历到rootFiber，遍历的过程会处理节点的优先级。然后根据优先级调度render阶段的入口函数。最后进行render阶段和commit阶段。</p>\n"},{"title":"第 二 篇文章 VUE底层原理","date":"2022-08-05T08:35:35.000Z","_content":"# vue原理\n\n## 1、mvvm\n\n- M：模型Model  --->也就是data中的数据\n- V：视图View  --->也就是dom\n- VM：视图模型ViewModel  --->也就是Vue实例（vm）\n\n![](/img/image-20230521163900590.png)\n\n## 2、vue响应式原理\n\n### 核心api object.defineProperty\n\n![](/img/image-20230521164959631.png)\n\n\nvue响应式也叫作数据双向绑定，大致原理阐述：\n\n 首先我们需要通过Object.defineProperty()方法把数据(data)设置为getter和setter的访问形式，这样我们就可以在数据被修改时在setter方法设置监视修改页面信息，也就是说每当数据被修改，就会触发对应的set方法，然后我们可以在set方法中去调用操作dom的方法。\n\n 此外，如果页面有input用v-model绑定数据，我们需要在这种绑定了data的input元素上添加监听，添加input事件监听，每当input事件被触发时，就修改对应的data\n\n原文链接：https://blog.csdn.net/weixin_48181168/article/details/120158346\n\n![](/img/image-20230521192401756.png)\n\n### **vue3启用proxy**\n\nhttps://blog.csdn.net/pagnzong/article/details/120389514\n\n代码\n\n![](/img/image-20230522155235201.png)\n\n\n### proxy和object.defineProperty响应式的对比\n\nvue2响应式的缺点：\n\n- 检测不到对象属性的添加和删除 （需要使用vue.set, vue.delete）\n- 数组`API`方法无法监听到 (需要特殊处理)\n- 深度监听需要递归到底，造成性能问题\n\nproxy解决的问题\n\n- 克服了vue2响应式的问题\n- 缺点：没有兼容ie等其他浏览器，无法实现polyfill\n\n\n## 3、虚拟dom和diff算法和react diff的区别\n\n用JS模拟DOM结构（vnode）\n增量更新： 新旧vnode对比，得出最小的更新范围，最后更新DOM\n\n数据驱动视图的模式下，有效控制DOM操作\n\n![](/img/image-20230521193406678.png)\n\ndiff算法\n\n\n\n- 当数据发生改变时，订阅者`watcher`就会调用`patch`给真实的`DOM`打补丁\n\n- 通过`isSameVnode`进行判断，相同则调用`patchVnode`方法\n\n- ```\n  patchVnode\n  ```\n\n  做了以下操作：\n\n  - 找到对应的真实`dom`，称为`el`\n  - 如果都有都有文本节点且不相等，将`el`文本节点设置为`Vnode`的文本节点\n  - 如果`oldVnode`有子节点而`VNode`没有，则删除`el`子节点\n  - 如果`oldVnode`没有子节点而`VNode`有，则将`VNode`的子节点真实化后添加到`el`\n  - 如果两者都有子节点，则执行`updateChildren`函数比较子节点\n\n- ```\n  updateChildren\n  ```\n\n  主要做了以下操作：\n\n  - 设置新旧`VNode`的头尾指针\n  - 新旧头尾指针进行比较，循环向中间靠拢，根据情况调用`patchVnode`进行`patch`重复流程、调用`createElem`创建一个新节点，从哈希表寻找 `key`一致的`VNode` 节点再分情况操作\n\n**相同点：**\nVue和react的diff算法，都是不进行跨层级比较，只做同级比较\n\n**不同点：**\n\n1. vue会在patch函数中给被操作的节点打补丁（patchflag），在diff的时候更清晰\n2. vue对比节点，当节点元素类型相同，但是className不同时，认为是不同类型的元素，删除重新创建；而react则认为是同类型节点，进行修改操作\n3. diff策略，vue的性能优于react\n\n## 4、模板编译template\n\ntemplate->render->h->vdom->true dom\n\n## 5、vue组件的渲染和更新流程\n\n初次渲染\n![](/img/image-20230521212323764.png)\n\n更新\n![](/img/image-20230521212411230.png)\n\n完整流程图\n![](/img/image-20230521212545143.png)\n","source":"_posts/22-08-05-2.md","raw":"---\ntitle: 第 二 篇文章 VUE底层原理\ndate: 2022-08-05 16:35:35\n---\n# vue原理\n\n## 1、mvvm\n\n- M：模型Model  --->也就是data中的数据\n- V：视图View  --->也就是dom\n- VM：视图模型ViewModel  --->也就是Vue实例（vm）\n\n![](/img/image-20230521163900590.png)\n\n## 2、vue响应式原理\n\n### 核心api object.defineProperty\n\n![](/img/image-20230521164959631.png)\n\n\nvue响应式也叫作数据双向绑定，大致原理阐述：\n\n 首先我们需要通过Object.defineProperty()方法把数据(data)设置为getter和setter的访问形式，这样我们就可以在数据被修改时在setter方法设置监视修改页面信息，也就是说每当数据被修改，就会触发对应的set方法，然后我们可以在set方法中去调用操作dom的方法。\n\n 此外，如果页面有input用v-model绑定数据，我们需要在这种绑定了data的input元素上添加监听，添加input事件监听，每当input事件被触发时，就修改对应的data\n\n原文链接：https://blog.csdn.net/weixin_48181168/article/details/120158346\n\n![](/img/image-20230521192401756.png)\n\n### **vue3启用proxy**\n\nhttps://blog.csdn.net/pagnzong/article/details/120389514\n\n代码\n\n![](/img/image-20230522155235201.png)\n\n\n### proxy和object.defineProperty响应式的对比\n\nvue2响应式的缺点：\n\n- 检测不到对象属性的添加和删除 （需要使用vue.set, vue.delete）\n- 数组`API`方法无法监听到 (需要特殊处理)\n- 深度监听需要递归到底，造成性能问题\n\nproxy解决的问题\n\n- 克服了vue2响应式的问题\n- 缺点：没有兼容ie等其他浏览器，无法实现polyfill\n\n\n## 3、虚拟dom和diff算法和react diff的区别\n\n用JS模拟DOM结构（vnode）\n增量更新： 新旧vnode对比，得出最小的更新范围，最后更新DOM\n\n数据驱动视图的模式下，有效控制DOM操作\n\n![](/img/image-20230521193406678.png)\n\ndiff算法\n\n\n\n- 当数据发生改变时，订阅者`watcher`就会调用`patch`给真实的`DOM`打补丁\n\n- 通过`isSameVnode`进行判断，相同则调用`patchVnode`方法\n\n- ```\n  patchVnode\n  ```\n\n  做了以下操作：\n\n  - 找到对应的真实`dom`，称为`el`\n  - 如果都有都有文本节点且不相等，将`el`文本节点设置为`Vnode`的文本节点\n  - 如果`oldVnode`有子节点而`VNode`没有，则删除`el`子节点\n  - 如果`oldVnode`没有子节点而`VNode`有，则将`VNode`的子节点真实化后添加到`el`\n  - 如果两者都有子节点，则执行`updateChildren`函数比较子节点\n\n- ```\n  updateChildren\n  ```\n\n  主要做了以下操作：\n\n  - 设置新旧`VNode`的头尾指针\n  - 新旧头尾指针进行比较，循环向中间靠拢，根据情况调用`patchVnode`进行`patch`重复流程、调用`createElem`创建一个新节点，从哈希表寻找 `key`一致的`VNode` 节点再分情况操作\n\n**相同点：**\nVue和react的diff算法，都是不进行跨层级比较，只做同级比较\n\n**不同点：**\n\n1. vue会在patch函数中给被操作的节点打补丁（patchflag），在diff的时候更清晰\n2. vue对比节点，当节点元素类型相同，但是className不同时，认为是不同类型的元素，删除重新创建；而react则认为是同类型节点，进行修改操作\n3. diff策略，vue的性能优于react\n\n## 4、模板编译template\n\ntemplate->render->h->vdom->true dom\n\n## 5、vue组件的渲染和更新流程\n\n初次渲染\n![](/img/image-20230521212323764.png)\n\n更新\n![](/img/image-20230521212411230.png)\n\n完整流程图\n![](/img/image-20230521212545143.png)\n","slug":"22-08-05-2","published":1,"updated":"2023-07-31T11:51:18.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkrly5lo0001pcupgke3cs5e","content":"<h1 id=\"vue原理\"><a href=\"#vue原理\" class=\"headerlink\" title=\"vue原理\"></a>vue原理</h1><h2 id=\"1、mvvm\"><a href=\"#1、mvvm\" class=\"headerlink\" title=\"1、mvvm\"></a>1、mvvm</h2><ul>\n<li>M：模型Model  —&gt;也就是data中的数据</li>\n<li>V：视图View  —&gt;也就是dom</li>\n<li>VM：视图模型ViewModel  —&gt;也就是Vue实例（vm）</li>\n</ul>\n<p><img src=\"/img/image-20230521163900590.png\"></p>\n<h2 id=\"2、vue响应式原理\"><a href=\"#2、vue响应式原理\" class=\"headerlink\" title=\"2、vue响应式原理\"></a>2、vue响应式原理</h2><h3 id=\"核心api-object-defineProperty\"><a href=\"#核心api-object-defineProperty\" class=\"headerlink\" title=\"核心api object.defineProperty\"></a>核心api object.defineProperty</h3><p><img src=\"/img/image-20230521164959631.png\"></p>\n<p>vue响应式也叫作数据双向绑定，大致原理阐述：</p>\n<p> 首先我们需要通过Object.defineProperty()方法把数据(data)设置为getter和setter的访问形式，这样我们就可以在数据被修改时在setter方法设置监视修改页面信息，也就是说每当数据被修改，就会触发对应的set方法，然后我们可以在set方法中去调用操作dom的方法。</p>\n<p> 此外，如果页面有input用v-model绑定数据，我们需要在这种绑定了data的input元素上添加监听，添加input事件监听，每当input事件被触发时，就修改对应的data</p>\n<p>原文链接：<a href=\"https://blog.csdn.net/weixin_48181168/article/details/120158346\">https://blog.csdn.net/weixin_48181168/article/details/120158346</a></p>\n<p><img src=\"/img/image-20230521192401756.png\"></p>\n<h3 id=\"vue3启用proxy\"><a href=\"#vue3启用proxy\" class=\"headerlink\" title=\"vue3启用proxy\"></a><strong>vue3启用proxy</strong></h3><p><a href=\"https://blog.csdn.net/pagnzong/article/details/120389514\">https://blog.csdn.net/pagnzong/article/details/120389514</a></p>\n<p>代码</p>\n<p><img src=\"/img/image-20230522155235201.png\"></p>\n<h3 id=\"proxy和object-defineProperty响应式的对比\"><a href=\"#proxy和object-defineProperty响应式的对比\" class=\"headerlink\" title=\"proxy和object.defineProperty响应式的对比\"></a>proxy和object.defineProperty响应式的对比</h3><p>vue2响应式的缺点：</p>\n<ul>\n<li>检测不到对象属性的添加和删除 （需要使用vue.set, vue.delete）</li>\n<li>数组<code>API</code>方法无法监听到 (需要特殊处理)</li>\n<li>深度监听需要递归到底，造成性能问题</li>\n</ul>\n<p>proxy解决的问题</p>\n<ul>\n<li>克服了vue2响应式的问题</li>\n<li>缺点：没有兼容ie等其他浏览器，无法实现polyfill</li>\n</ul>\n<h2 id=\"3、虚拟dom和diff算法和react-diff的区别\"><a href=\"#3、虚拟dom和diff算法和react-diff的区别\" class=\"headerlink\" title=\"3、虚拟dom和diff算法和react diff的区别\"></a>3、虚拟dom和diff算法和react diff的区别</h2><p>用JS模拟DOM结构（vnode）<br>增量更新： 新旧vnode对比，得出最小的更新范围，最后更新DOM</p>\n<p>数据驱动视图的模式下，有效控制DOM操作</p>\n<p><img src=\"/img/image-20230521193406678.png\"></p>\n<p>diff算法</p>\n<ul>\n<li><p>当数据发生改变时，订阅者<code>watcher</code>就会调用<code>patch</code>给真实的<code>DOM</code>打补丁</p>\n</li>\n<li><p>通过<code>isSameVnode</code>进行判断，相同则调用<code>patchVnode</code>方法</p>\n</li>\n<li><pre><code>patchVnode\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  做了以下操作：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 找到对应的真实`dom`，称为`el`</span><br><span class=\"line\">  - 如果都有都有文本节点且不相等，将`el`文本节点设置为`Vnode`的文本节点</span><br><span class=\"line\">  - 如果`oldVnode`有子节点而`VNode`没有，则删除`el`子节点</span><br><span class=\"line\">  - 如果`oldVnode`没有子节点而`VNode`有，则将`VNode`的子节点真实化后添加到`el`</span><br><span class=\"line\">  - 如果两者都有子节点，则执行`updateChildren`函数比较子节点</span><br><span class=\"line\"></span><br><span class=\"line\">- ```</span><br><span class=\"line\">  updateChildren</span><br></pre></td></tr></table></figure>\n\n主要做了以下操作：\n\n- 设置新旧`VNode`的头尾指针\n- 新旧头尾指针进行比较，循环向中间靠拢，根据情况调用`patchVnode`进行`patch`重复流程、调用`createElem`创建一个新节点，从哈希表寻找 `key`一致的`VNode` 节点再分情况操作\n</code></pre>\n</li>\n</ul>\n<p><strong>相同点：</strong><br>Vue和react的diff算法，都是不进行跨层级比较，只做同级比较</p>\n<p><strong>不同点：</strong></p>\n<ol>\n<li>vue会在patch函数中给被操作的节点打补丁（patchflag），在diff的时候更清晰</li>\n<li>vue对比节点，当节点元素类型相同，但是className不同时，认为是不同类型的元素，删除重新创建；而react则认为是同类型节点，进行修改操作</li>\n<li>diff策略，vue的性能优于react</li>\n</ol>\n<h2 id=\"4、模板编译template\"><a href=\"#4、模板编译template\" class=\"headerlink\" title=\"4、模板编译template\"></a>4、模板编译template</h2><p>template-&gt;render-&gt;h-&gt;vdom-&gt;true dom</p>\n<h2 id=\"5、vue组件的渲染和更新流程\"><a href=\"#5、vue组件的渲染和更新流程\" class=\"headerlink\" title=\"5、vue组件的渲染和更新流程\"></a>5、vue组件的渲染和更新流程</h2><p>初次渲染<br><img src=\"/img/image-20230521212323764.png\"></p>\n<p>更新<br><img src=\"/img/image-20230521212411230.png\"></p>\n<p>完整流程图<br><img src=\"/img/image-20230521212545143.png\"></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_6.webp","cover_type":"img","excerpt":"","more":"<h1 id=\"vue原理\"><a href=\"#vue原理\" class=\"headerlink\" title=\"vue原理\"></a>vue原理</h1><h2 id=\"1、mvvm\"><a href=\"#1、mvvm\" class=\"headerlink\" title=\"1、mvvm\"></a>1、mvvm</h2><ul>\n<li>M：模型Model  —&gt;也就是data中的数据</li>\n<li>V：视图View  —&gt;也就是dom</li>\n<li>VM：视图模型ViewModel  —&gt;也就是Vue实例（vm）</li>\n</ul>\n<p><img src=\"/img/image-20230521163900590.png\"></p>\n<h2 id=\"2、vue响应式原理\"><a href=\"#2、vue响应式原理\" class=\"headerlink\" title=\"2、vue响应式原理\"></a>2、vue响应式原理</h2><h3 id=\"核心api-object-defineProperty\"><a href=\"#核心api-object-defineProperty\" class=\"headerlink\" title=\"核心api object.defineProperty\"></a>核心api object.defineProperty</h3><p><img src=\"/img/image-20230521164959631.png\"></p>\n<p>vue响应式也叫作数据双向绑定，大致原理阐述：</p>\n<p> 首先我们需要通过Object.defineProperty()方法把数据(data)设置为getter和setter的访问形式，这样我们就可以在数据被修改时在setter方法设置监视修改页面信息，也就是说每当数据被修改，就会触发对应的set方法，然后我们可以在set方法中去调用操作dom的方法。</p>\n<p> 此外，如果页面有input用v-model绑定数据，我们需要在这种绑定了data的input元素上添加监听，添加input事件监听，每当input事件被触发时，就修改对应的data</p>\n<p>原文链接：<a href=\"https://blog.csdn.net/weixin_48181168/article/details/120158346\">https://blog.csdn.net/weixin_48181168/article/details/120158346</a></p>\n<p><img src=\"/img/image-20230521192401756.png\"></p>\n<h3 id=\"vue3启用proxy\"><a href=\"#vue3启用proxy\" class=\"headerlink\" title=\"vue3启用proxy\"></a><strong>vue3启用proxy</strong></h3><p><a href=\"https://blog.csdn.net/pagnzong/article/details/120389514\">https://blog.csdn.net/pagnzong/article/details/120389514</a></p>\n<p>代码</p>\n<p><img src=\"/img/image-20230522155235201.png\"></p>\n<h3 id=\"proxy和object-defineProperty响应式的对比\"><a href=\"#proxy和object-defineProperty响应式的对比\" class=\"headerlink\" title=\"proxy和object.defineProperty响应式的对比\"></a>proxy和object.defineProperty响应式的对比</h3><p>vue2响应式的缺点：</p>\n<ul>\n<li>检测不到对象属性的添加和删除 （需要使用vue.set, vue.delete）</li>\n<li>数组<code>API</code>方法无法监听到 (需要特殊处理)</li>\n<li>深度监听需要递归到底，造成性能问题</li>\n</ul>\n<p>proxy解决的问题</p>\n<ul>\n<li>克服了vue2响应式的问题</li>\n<li>缺点：没有兼容ie等其他浏览器，无法实现polyfill</li>\n</ul>\n<h2 id=\"3、虚拟dom和diff算法和react-diff的区别\"><a href=\"#3、虚拟dom和diff算法和react-diff的区别\" class=\"headerlink\" title=\"3、虚拟dom和diff算法和react diff的区别\"></a>3、虚拟dom和diff算法和react diff的区别</h2><p>用JS模拟DOM结构（vnode）<br>增量更新： 新旧vnode对比，得出最小的更新范围，最后更新DOM</p>\n<p>数据驱动视图的模式下，有效控制DOM操作</p>\n<p><img src=\"/img/image-20230521193406678.png\"></p>\n<p>diff算法</p>\n<ul>\n<li><p>当数据发生改变时，订阅者<code>watcher</code>就会调用<code>patch</code>给真实的<code>DOM</code>打补丁</p>\n</li>\n<li><p>通过<code>isSameVnode</code>进行判断，相同则调用<code>patchVnode</code>方法</p>\n</li>\n<li><pre><code>patchVnode\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  做了以下操作：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 找到对应的真实`dom`，称为`el`</span><br><span class=\"line\">  - 如果都有都有文本节点且不相等，将`el`文本节点设置为`Vnode`的文本节点</span><br><span class=\"line\">  - 如果`oldVnode`有子节点而`VNode`没有，则删除`el`子节点</span><br><span class=\"line\">  - 如果`oldVnode`没有子节点而`VNode`有，则将`VNode`的子节点真实化后添加到`el`</span><br><span class=\"line\">  - 如果两者都有子节点，则执行`updateChildren`函数比较子节点</span><br><span class=\"line\"></span><br><span class=\"line\">- ```</span><br><span class=\"line\">  updateChildren</span><br></pre></td></tr></table></figure>\n\n主要做了以下操作：\n\n- 设置新旧`VNode`的头尾指针\n- 新旧头尾指针进行比较，循环向中间靠拢，根据情况调用`patchVnode`进行`patch`重复流程、调用`createElem`创建一个新节点，从哈希表寻找 `key`一致的`VNode` 节点再分情况操作\n</code></pre>\n</li>\n</ul>\n<p><strong>相同点：</strong><br>Vue和react的diff算法，都是不进行跨层级比较，只做同级比较</p>\n<p><strong>不同点：</strong></p>\n<ol>\n<li>vue会在patch函数中给被操作的节点打补丁（patchflag），在diff的时候更清晰</li>\n<li>vue对比节点，当节点元素类型相同，但是className不同时，认为是不同类型的元素，删除重新创建；而react则认为是同类型节点，进行修改操作</li>\n<li>diff策略，vue的性能优于react</li>\n</ol>\n<h2 id=\"4、模板编译template\"><a href=\"#4、模板编译template\" class=\"headerlink\" title=\"4、模板编译template\"></a>4、模板编译template</h2><p>template-&gt;render-&gt;h-&gt;vdom-&gt;true dom</p>\n<h2 id=\"5、vue组件的渲染和更新流程\"><a href=\"#5、vue组件的渲染和更新流程\" class=\"headerlink\" title=\"5、vue组件的渲染和更新流程\"></a>5、vue组件的渲染和更新流程</h2><p>初次渲染<br><img src=\"/img/image-20230521212323764.png\"></p>\n<p>更新<br><img src=\"/img/image-20230521212411230.png\"></p>\n<p>完整流程图<br><img src=\"/img/image-20230521212545143.png\"></p>\n"},{"title":"第 三 篇文章 Git","date":"2022-08-10T08:35:35.000Z","_content":"\n# Git\n\n**上传到github**先git init, git add . ,git commit -m ' ', 再关联远程库\n\nGit 中的三个**区域**：工作区、暂存区、Git 仓库。\n\n工作区：处理工作的区域\n\n暂存区：已完成的工作的临时存放区域，等待被提交\n\nGit 仓库：最终的存放区域\n\nGit 中的三种**状态**：已修改 modified 已暂存 staged 已提交 committed\n\n**已修改**：表示修改了文件，但还没将修改的结果放到暂存区。\n\n**已暂存**：表示对已修改文件的当前 版本做了标记，使之包含 在下次提交的列表中。\n\n**已提交**：表示文件已经安全地保存 在本地的 Git 仓库中。\n\n注意：\n\n⚫ 工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。\n\n⚫ 如果文件已修改并放入暂存区，就属于已暂存状态。\n\n⚫ 如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。\n\n## Git的基本操作\n\n1. git init 命令会创建一个名为 .git 的隐藏目录，这个 .git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。\n\n2. git add 开始跟踪一个文件，git add . 一次性将所有的新增和修改过的文件加入暂存区\n\n3. git status 命令查看文件处于什么状态\n\n4. git commit 命令进行提交, 其中 -m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：\n\n   ```js\n   git commit -m '什么信息'\t\n   ```\n\n5. 跳过使用暂存区域\n\nGit 标准的工作流程是**工作区 → 暂存区 → Git 仓库**。Git 工作的流程简化为了**工作区 → Git 仓库**。\n\n```js\ngit commit -a -m '描述信息'\n```\n\n6. 移除文件\n\n   从 Git 仓库中移除文件的方式有两种： \n\n   ① 从 Git 仓库和工作区中同时移除对应的文件 \n\n   ② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件\n\n![](/img/image-20221025163441508.png)\n\n## Git分支的概念\n\nmaster 主分支\n\n功能分支\n\n1. 创建新分支       **git branch 分支名称**  \n\n   基于当前分支，创建一个新的分支，创建好分支后，当前位置还是在master分支上\n\n2. 切换分支     **git checkout 分支名称**     \n\n   可以切换到指定的分支上进行开发\n\n3. 分支的快速创建和切换  **git checkout -b 分支名称**\n\n4. 合并分支   先切换到 master分支上，再运行 **git merge 分支名称** 命令，来合并功能分支\n\n   功能分支的代码开发测试完毕之后，可以使用命令，将完成后的代码合并到 master 主分支上\n\n5. 删除分支 **git branch -d 分支名称**\n\n   当把功能分支的代码合并到 master 主分支上以后，就可以使用命令，删除对应的功能分支\n\n​\t6、git remote prune origin 清理本地仓库中与远程仓库中origin关联的已经不存在的分支引用\n\n## 远程分支操作\n\n1. 将本地分支推送到远程仓库\n\n​\t\t如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：\n![](/img/image-20221025164401144.png)\n\n\ngitlab的操作，git pull origin 分支名\n\n\n\n2. 查看远程仓库中所有的分支列表\n\n   通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：\n![](/img/image-20221025164457908.png)\n\n\n3. 跟踪分支\n\n​\t\t跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：\n![](/img/image-20221025164539512.png)\n\n\n4. 拉取远程分支的最新的代码\n\n   首先切换到本地分支\n\n   git pull origin 远程分支名\n\n   可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：\n![](/img/image-20221025164618940.png)\n\n\n5. 删除远程分支\n\n   可以使用如下的命令，删除远程仓库中指定的分支：\n![](/img/image-20221025164652215.png)\n\n6. 合并分支冲突\n\n如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开 这些包含冲突的文件然后手动解决冲突。、\n\n## git clone\n\ngit init\n\n然后git clone +url\n\n如果连接不上就\n\nhttps://blog.csdn.net/greatcoder/article/details/126138230\n\ngit clone https://ghproxy.com/+github网站地址\n\n就比如 git clone https://ghproxy.com/https://github.com/HaogegeShy/jingdong.git\n\n\n## git问题error: remote origin already exists\n\nhttps://blog.csdn.net/qq_39208536/article/details/125231265\n\n如果你clone下来一个别人的仓库，在此基础上完成你的代码，推送到自己的仓库可能遇到如下问题：\nerror: remote origin already exists.表示远程仓库已存在。\n因此你要进行以下操作：\n1、先输入git remote rm origin 删除关联的origin的远程库\n2、关联自己的仓库 git remote add origin https://gitee.com/xxxxxx.git\n3、最后git push origin master，这样就推送到自己的仓库了。\n\n## git代码提交到远程仓库时\n\n选用ssh的方式\n\n## git rebase和git merge的区别\n\n1、rebase变基，把当前的commit放到公共分支的最后面，merge把当前的commit和公共分支合并在一起，会产生一个合并的commit；\n\n2、用merge命令解决完冲突后会产生一个commit，而用rebase命令解决完冲突后不会产生额外的commit。\n\nmerge中fast-forward 不会产生commit提交，--no-ff 会产生commit提交","source":"_posts/22-08-10-3.md","raw":"---\ntitle: 第 三 篇文章 Git\ndate: 2022-08-10 16:35:35\n---\n\n# Git\n\n**上传到github**先git init, git add . ,git commit -m ' ', 再关联远程库\n\nGit 中的三个**区域**：工作区、暂存区、Git 仓库。\n\n工作区：处理工作的区域\n\n暂存区：已完成的工作的临时存放区域，等待被提交\n\nGit 仓库：最终的存放区域\n\nGit 中的三种**状态**：已修改 modified 已暂存 staged 已提交 committed\n\n**已修改**：表示修改了文件，但还没将修改的结果放到暂存区。\n\n**已暂存**：表示对已修改文件的当前 版本做了标记，使之包含 在下次提交的列表中。\n\n**已提交**：表示文件已经安全地保存 在本地的 Git 仓库中。\n\n注意：\n\n⚫ 工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。\n\n⚫ 如果文件已修改并放入暂存区，就属于已暂存状态。\n\n⚫ 如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。\n\n## Git的基本操作\n\n1. git init 命令会创建一个名为 .git 的隐藏目录，这个 .git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。\n\n2. git add 开始跟踪一个文件，git add . 一次性将所有的新增和修改过的文件加入暂存区\n\n3. git status 命令查看文件处于什么状态\n\n4. git commit 命令进行提交, 其中 -m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：\n\n   ```js\n   git commit -m '什么信息'\t\n   ```\n\n5. 跳过使用暂存区域\n\nGit 标准的工作流程是**工作区 → 暂存区 → Git 仓库**。Git 工作的流程简化为了**工作区 → Git 仓库**。\n\n```js\ngit commit -a -m '描述信息'\n```\n\n6. 移除文件\n\n   从 Git 仓库中移除文件的方式有两种： \n\n   ① 从 Git 仓库和工作区中同时移除对应的文件 \n\n   ② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件\n\n![](/img/image-20221025163441508.png)\n\n## Git分支的概念\n\nmaster 主分支\n\n功能分支\n\n1. 创建新分支       **git branch 分支名称**  \n\n   基于当前分支，创建一个新的分支，创建好分支后，当前位置还是在master分支上\n\n2. 切换分支     **git checkout 分支名称**     \n\n   可以切换到指定的分支上进行开发\n\n3. 分支的快速创建和切换  **git checkout -b 分支名称**\n\n4. 合并分支   先切换到 master分支上，再运行 **git merge 分支名称** 命令，来合并功能分支\n\n   功能分支的代码开发测试完毕之后，可以使用命令，将完成后的代码合并到 master 主分支上\n\n5. 删除分支 **git branch -d 分支名称**\n\n   当把功能分支的代码合并到 master 主分支上以后，就可以使用命令，删除对应的功能分支\n\n​\t6、git remote prune origin 清理本地仓库中与远程仓库中origin关联的已经不存在的分支引用\n\n## 远程分支操作\n\n1. 将本地分支推送到远程仓库\n\n​\t\t如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：\n![](/img/image-20221025164401144.png)\n\n\ngitlab的操作，git pull origin 分支名\n\n\n\n2. 查看远程仓库中所有的分支列表\n\n   通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：\n![](/img/image-20221025164457908.png)\n\n\n3. 跟踪分支\n\n​\t\t跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：\n![](/img/image-20221025164539512.png)\n\n\n4. 拉取远程分支的最新的代码\n\n   首先切换到本地分支\n\n   git pull origin 远程分支名\n\n   可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：\n![](/img/image-20221025164618940.png)\n\n\n5. 删除远程分支\n\n   可以使用如下的命令，删除远程仓库中指定的分支：\n![](/img/image-20221025164652215.png)\n\n6. 合并分支冲突\n\n如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开 这些包含冲突的文件然后手动解决冲突。、\n\n## git clone\n\ngit init\n\n然后git clone +url\n\n如果连接不上就\n\nhttps://blog.csdn.net/greatcoder/article/details/126138230\n\ngit clone https://ghproxy.com/+github网站地址\n\n就比如 git clone https://ghproxy.com/https://github.com/HaogegeShy/jingdong.git\n\n\n## git问题error: remote origin already exists\n\nhttps://blog.csdn.net/qq_39208536/article/details/125231265\n\n如果你clone下来一个别人的仓库，在此基础上完成你的代码，推送到自己的仓库可能遇到如下问题：\nerror: remote origin already exists.表示远程仓库已存在。\n因此你要进行以下操作：\n1、先输入git remote rm origin 删除关联的origin的远程库\n2、关联自己的仓库 git remote add origin https://gitee.com/xxxxxx.git\n3、最后git push origin master，这样就推送到自己的仓库了。\n\n## git代码提交到远程仓库时\n\n选用ssh的方式\n\n## git rebase和git merge的区别\n\n1、rebase变基，把当前的commit放到公共分支的最后面，merge把当前的commit和公共分支合并在一起，会产生一个合并的commit；\n\n2、用merge命令解决完冲突后会产生一个commit，而用rebase命令解决完冲突后不会产生额外的commit。\n\nmerge中fast-forward 不会产生commit提交，--no-ff 会产生commit提交","slug":"22-08-10-3","published":1,"updated":"2023-07-31T11:59:43.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkrly5lq0002pcup5a2xhpnp","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><p><strong>上传到github</strong>先git init, git add . ,git commit -m ‘ ‘, 再关联远程库</p>\n<p>Git 中的三个<strong>区域</strong>：工作区、暂存区、Git 仓库。</p>\n<p>工作区：处理工作的区域</p>\n<p>暂存区：已完成的工作的临时存放区域，等待被提交</p>\n<p>Git 仓库：最终的存放区域</p>\n<p>Git 中的三种<strong>状态</strong>：已修改 modified 已暂存 staged 已提交 committed</p>\n<p><strong>已修改</strong>：表示修改了文件，但还没将修改的结果放到暂存区。</p>\n<p><strong>已暂存</strong>：表示对已修改文件的当前 版本做了标记，使之包含 在下次提交的列表中。</p>\n<p><strong>已提交</strong>：表示文件已经安全地保存 在本地的 Git 仓库中。</p>\n<p>注意：</p>\n<p>⚫ 工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。</p>\n<p>⚫ 如果文件已修改并放入暂存区，就属于已暂存状态。</p>\n<p>⚫ 如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。</p>\n<h2 id=\"Git的基本操作\"><a href=\"#Git的基本操作\" class=\"headerlink\" title=\"Git的基本操作\"></a>Git的基本操作</h2><ol>\n<li><p>git init 命令会创建一个名为 .git 的隐藏目录，这个 .git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。</p>\n</li>\n<li><p>git add 开始跟踪一个文件，git add . 一次性将所有的新增和修改过的文件加入暂存区</p>\n</li>\n<li><p>git status 命令查看文件处于什么状态</p>\n</li>\n<li><p>git commit 命令进行提交, 其中 -m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;什么信息&#x27;</span>\t</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跳过使用暂存区域</p>\n</li>\n</ol>\n<p>Git 标准的工作流程是<strong>工作区 → 暂存区 → Git 仓库</strong>。Git 工作的流程简化为了<strong>工作区 → Git 仓库</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a -m <span class=\"string\">&#x27;描述信息&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><p>移除文件</p>\n<p>从 Git 仓库中移除文件的方式有两种： </p>\n<p>① 从 Git 仓库和工作区中同时移除对应的文件 </p>\n<p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025163441508.png\"></p>\n<h2 id=\"Git分支的概念\"><a href=\"#Git分支的概念\" class=\"headerlink\" title=\"Git分支的概念\"></a>Git分支的概念</h2><p>master 主分支</p>\n<p>功能分支</p>\n<ol>\n<li><p>创建新分支       <strong>git branch 分支名称</strong>  </p>\n<p>基于当前分支，创建一个新的分支，创建好分支后，当前位置还是在master分支上</p>\n</li>\n<li><p>切换分支     <strong>git checkout 分支名称</strong>     </p>\n<p>可以切换到指定的分支上进行开发</p>\n</li>\n<li><p>分支的快速创建和切换  <strong>git checkout -b 分支名称</strong></p>\n</li>\n<li><p>合并分支   先切换到 master分支上，再运行 <strong>git merge 分支名称</strong> 命令，来合并功能分支</p>\n<p>功能分支的代码开发测试完毕之后，可以使用命令，将完成后的代码合并到 master 主分支上</p>\n</li>\n<li><p>删除分支 <strong>git branch -d 分支名称</strong></p>\n<p>当把功能分支的代码合并到 master 主分支上以后，就可以使用命令，删除对应的功能分支</p>\n</li>\n</ol>\n<p>​\t6、git remote prune origin 清理本地仓库中与远程仓库中origin关联的已经不存在的分支引用</p>\n<h2 id=\"远程分支操作\"><a href=\"#远程分支操作\" class=\"headerlink\" title=\"远程分支操作\"></a>远程分支操作</h2><ol>\n<li>将本地分支推送到远程仓库</li>\n</ol>\n<p>​\t\t如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：<br><img src=\"/img/image-20221025164401144.png\"></p>\n<p>gitlab的操作，git pull origin 分支名</p>\n<ol start=\"2\">\n<li><p>查看远程仓库中所有的分支列表</p>\n<p>通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025164457908.png\"></p>\n<ol start=\"3\">\n<li>跟踪分支</li>\n</ol>\n<p>​\t\t跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：<br><img src=\"/img/image-20221025164539512.png\"></p>\n<ol start=\"4\">\n<li><p>拉取远程分支的最新的代码</p>\n<p>首先切换到本地分支</p>\n<p>git pull origin 远程分支名</p>\n<p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025164618940.png\"></p>\n<ol start=\"5\">\n<li><p>删除远程分支</p>\n<p>可以使用如下的命令，删除远程仓库中指定的分支：</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025164652215.png\"></p>\n<ol start=\"6\">\n<li>合并分支冲突</li>\n</ol>\n<p>如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开 这些包含冲突的文件然后手动解决冲突。、</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h2><p>git init</p>\n<p>然后git clone +url</p>\n<p>如果连接不上就</p>\n<p><a href=\"https://blog.csdn.net/greatcoder/article/details/126138230\">https://blog.csdn.net/greatcoder/article/details/126138230</a></p>\n<p>git clone <a href=\"https://ghproxy.com/+github%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9D%80\">https://ghproxy.com/+github网站地址</a></p>\n<p>就比如 git clone <a href=\"https://ghproxy.com/https://github.com/HaogegeShy/jingdong.git\">https://ghproxy.com/https://github.com/HaogegeShy/jingdong.git</a></p>\n<h2 id=\"git问题error-remote-origin-already-exists\"><a href=\"#git问题error-remote-origin-already-exists\" class=\"headerlink\" title=\"git问题error: remote origin already exists\"></a>git问题error: remote origin already exists</h2><p><a href=\"https://blog.csdn.net/qq_39208536/article/details/125231265\">https://blog.csdn.net/qq_39208536/article/details/125231265</a></p>\n<p>如果你clone下来一个别人的仓库，在此基础上完成你的代码，推送到自己的仓库可能遇到如下问题：<br>error: remote origin already exists.表示远程仓库已存在。<br>因此你要进行以下操作：<br>1、先输入git remote rm origin 删除关联的origin的远程库<br>2、关联自己的仓库 git remote add origin <a href=\"https://gitee.com/xxxxxx.git\">https://gitee.com/xxxxxx.git</a><br>3、最后git push origin master，这样就推送到自己的仓库了。</p>\n<h2 id=\"git代码提交到远程仓库时\"><a href=\"#git代码提交到远程仓库时\" class=\"headerlink\" title=\"git代码提交到远程仓库时\"></a>git代码提交到远程仓库时</h2><p>选用ssh的方式</p>\n<h2 id=\"git-rebase和git-merge的区别\"><a href=\"#git-rebase和git-merge的区别\" class=\"headerlink\" title=\"git rebase和git merge的区别\"></a>git rebase和git merge的区别</h2><p>1、rebase变基，把当前的commit放到公共分支的最后面，merge把当前的commit和公共分支合并在一起，会产生一个合并的commit；</p>\n<p>2、用merge命令解决完冲突后会产生一个commit，而用rebase命令解决完冲突后不会产生额外的commit。</p>\n<p>merge中fast-forward 不会产生commit提交，–no-ff 会产生commit提交</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://source.fomal.cc/img/default_cover_8.webp","cover_type":"img","excerpt":"","more":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><p><strong>上传到github</strong>先git init, git add . ,git commit -m ‘ ‘, 再关联远程库</p>\n<p>Git 中的三个<strong>区域</strong>：工作区、暂存区、Git 仓库。</p>\n<p>工作区：处理工作的区域</p>\n<p>暂存区：已完成的工作的临时存放区域，等待被提交</p>\n<p>Git 仓库：最终的存放区域</p>\n<p>Git 中的三种<strong>状态</strong>：已修改 modified 已暂存 staged 已提交 committed</p>\n<p><strong>已修改</strong>：表示修改了文件，但还没将修改的结果放到暂存区。</p>\n<p><strong>已暂存</strong>：表示对已修改文件的当前 版本做了标记，使之包含 在下次提交的列表中。</p>\n<p><strong>已提交</strong>：表示文件已经安全地保存 在本地的 Git 仓库中。</p>\n<p>注意：</p>\n<p>⚫ 工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。</p>\n<p>⚫ 如果文件已修改并放入暂存区，就属于已暂存状态。</p>\n<p>⚫ 如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。</p>\n<h2 id=\"Git的基本操作\"><a href=\"#Git的基本操作\" class=\"headerlink\" title=\"Git的基本操作\"></a>Git的基本操作</h2><ol>\n<li><p>git init 命令会创建一个名为 .git 的隐藏目录，这个 .git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。</p>\n</li>\n<li><p>git add 开始跟踪一个文件，git add . 一次性将所有的新增和修改过的文件加入暂存区</p>\n</li>\n<li><p>git status 命令查看文件处于什么状态</p>\n</li>\n<li><p>git commit 命令进行提交, 其中 -m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;什么信息&#x27;</span>\t</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跳过使用暂存区域</p>\n</li>\n</ol>\n<p>Git 标准的工作流程是<strong>工作区 → 暂存区 → Git 仓库</strong>。Git 工作的流程简化为了<strong>工作区 → Git 仓库</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a -m <span class=\"string\">&#x27;描述信息&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><p>移除文件</p>\n<p>从 Git 仓库中移除文件的方式有两种： </p>\n<p>① 从 Git 仓库和工作区中同时移除对应的文件 </p>\n<p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025163441508.png\"></p>\n<h2 id=\"Git分支的概念\"><a href=\"#Git分支的概念\" class=\"headerlink\" title=\"Git分支的概念\"></a>Git分支的概念</h2><p>master 主分支</p>\n<p>功能分支</p>\n<ol>\n<li><p>创建新分支       <strong>git branch 分支名称</strong>  </p>\n<p>基于当前分支，创建一个新的分支，创建好分支后，当前位置还是在master分支上</p>\n</li>\n<li><p>切换分支     <strong>git checkout 分支名称</strong>     </p>\n<p>可以切换到指定的分支上进行开发</p>\n</li>\n<li><p>分支的快速创建和切换  <strong>git checkout -b 分支名称</strong></p>\n</li>\n<li><p>合并分支   先切换到 master分支上，再运行 <strong>git merge 分支名称</strong> 命令，来合并功能分支</p>\n<p>功能分支的代码开发测试完毕之后，可以使用命令，将完成后的代码合并到 master 主分支上</p>\n</li>\n<li><p>删除分支 <strong>git branch -d 分支名称</strong></p>\n<p>当把功能分支的代码合并到 master 主分支上以后，就可以使用命令，删除对应的功能分支</p>\n</li>\n</ol>\n<p>​\t6、git remote prune origin 清理本地仓库中与远程仓库中origin关联的已经不存在的分支引用</p>\n<h2 id=\"远程分支操作\"><a href=\"#远程分支操作\" class=\"headerlink\" title=\"远程分支操作\"></a>远程分支操作</h2><ol>\n<li>将本地分支推送到远程仓库</li>\n</ol>\n<p>​\t\t如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：<br><img src=\"/img/image-20221025164401144.png\"></p>\n<p>gitlab的操作，git pull origin 分支名</p>\n<ol start=\"2\">\n<li><p>查看远程仓库中所有的分支列表</p>\n<p>通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025164457908.png\"></p>\n<ol start=\"3\">\n<li>跟踪分支</li>\n</ol>\n<p>​\t\t跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：<br><img src=\"/img/image-20221025164539512.png\"></p>\n<ol start=\"4\">\n<li><p>拉取远程分支的最新的代码</p>\n<p>首先切换到本地分支</p>\n<p>git pull origin 远程分支名</p>\n<p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025164618940.png\"></p>\n<ol start=\"5\">\n<li><p>删除远程分支</p>\n<p>可以使用如下的命令，删除远程仓库中指定的分支：</p>\n</li>\n</ol>\n<p><img src=\"/img/image-20221025164652215.png\"></p>\n<ol start=\"6\">\n<li>合并分支冲突</li>\n</ol>\n<p>如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开 这些包含冲突的文件然后手动解决冲突。、</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h2><p>git init</p>\n<p>然后git clone +url</p>\n<p>如果连接不上就</p>\n<p><a href=\"https://blog.csdn.net/greatcoder/article/details/126138230\">https://blog.csdn.net/greatcoder/article/details/126138230</a></p>\n<p>git clone <a href=\"https://ghproxy.com/+github%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9D%80\">https://ghproxy.com/+github网站地址</a></p>\n<p>就比如 git clone <a href=\"https://ghproxy.com/https://github.com/HaogegeShy/jingdong.git\">https://ghproxy.com/https://github.com/HaogegeShy/jingdong.git</a></p>\n<h2 id=\"git问题error-remote-origin-already-exists\"><a href=\"#git问题error-remote-origin-already-exists\" class=\"headerlink\" title=\"git问题error: remote origin already exists\"></a>git问题error: remote origin already exists</h2><p><a href=\"https://blog.csdn.net/qq_39208536/article/details/125231265\">https://blog.csdn.net/qq_39208536/article/details/125231265</a></p>\n<p>如果你clone下来一个别人的仓库，在此基础上完成你的代码，推送到自己的仓库可能遇到如下问题：<br>error: remote origin already exists.表示远程仓库已存在。<br>因此你要进行以下操作：<br>1、先输入git remote rm origin 删除关联的origin的远程库<br>2、关联自己的仓库 git remote add origin <a href=\"https://gitee.com/xxxxxx.git\">https://gitee.com/xxxxxx.git</a><br>3、最后git push origin master，这样就推送到自己的仓库了。</p>\n<h2 id=\"git代码提交到远程仓库时\"><a href=\"#git代码提交到远程仓库时\" class=\"headerlink\" title=\"git代码提交到远程仓库时\"></a>git代码提交到远程仓库时</h2><p>选用ssh的方式</p>\n<h2 id=\"git-rebase和git-merge的区别\"><a href=\"#git-rebase和git-merge的区别\" class=\"headerlink\" title=\"git rebase和git merge的区别\"></a>git rebase和git merge的区别</h2><p>1、rebase变基，把当前的commit放到公共分支的最后面，merge把当前的commit和公共分支合并在一起，会产生一个合并的commit；</p>\n<p>2、用merge命令解决完冲突后会产生一个commit，而用rebase命令解决完冲突后不会产生额外的commit。</p>\n<p>merge中fast-forward 不会产生commit提交，–no-ff 会产生commit提交</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}